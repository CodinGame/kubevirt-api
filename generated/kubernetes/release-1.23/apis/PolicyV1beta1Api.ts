/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    IoK8sApiPolicyV1beta1PodDisruptionBudget,
    IoK8sApiPolicyV1beta1PodDisruptionBudgetFromJSON,
    IoK8sApiPolicyV1beta1PodDisruptionBudgetToJSON,
    IoK8sApiPolicyV1beta1PodDisruptionBudgetList,
    IoK8sApiPolicyV1beta1PodDisruptionBudgetListFromJSON,
    IoK8sApiPolicyV1beta1PodDisruptionBudgetListToJSON,
    IoK8sApiPolicyV1beta1PodSecurityPolicy,
    IoK8sApiPolicyV1beta1PodSecurityPolicyFromJSON,
    IoK8sApiPolicyV1beta1PodSecurityPolicyToJSON,
    IoK8sApiPolicyV1beta1PodSecurityPolicyList,
    IoK8sApiPolicyV1beta1PodSecurityPolicyListFromJSON,
    IoK8sApiPolicyV1beta1PodSecurityPolicyListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models';

export interface CreatePolicyV1beta1NamespacedPodDisruptionBudgetRequest {
    namespace: string;
    body: IoK8sApiPolicyV1beta1PodDisruptionBudget;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface CreatePolicyV1beta1PodSecurityPolicyRequest {
    body: IoK8sApiPolicyV1beta1PodSecurityPolicy;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeletePolicyV1beta1CollectionPodSecurityPolicyRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeletePolicyV1beta1NamespacedPodDisruptionBudgetRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeletePolicyV1beta1PodSecurityPolicyRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListPolicyV1beta1NamespacedPodDisruptionBudgetRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListPolicyV1beta1PodSecurityPolicyRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchPolicyV1beta1NamespacedPodDisruptionBudgetRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface PatchPolicyV1beta1PodSecurityPolicyRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface ReadPolicyV1beta1NamespacedPodDisruptionBudgetRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadPolicyV1beta1PodSecurityPolicyRequest {
    name: string;
    pretty?: string;
}

export interface ReplacePolicyV1beta1NamespacedPodDisruptionBudgetRequest {
    name: string;
    namespace: string;
    body: IoK8sApiPolicyV1beta1PodDisruptionBudget;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest {
    name: string;
    namespace: string;
    body: IoK8sApiPolicyV1beta1PodDisruptionBudget;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ReplacePolicyV1beta1PodSecurityPolicyRequest {
    name: string;
    body: IoK8sApiPolicyV1beta1PodSecurityPolicy;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface WatchPolicyV1beta1NamespacedPodDisruptionBudgetRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchPolicyV1beta1NamespacedPodDisruptionBudgetListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchPolicyV1beta1PodSecurityPolicyRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchPolicyV1beta1PodSecurityPolicyListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * 
 */
export class PolicyV1beta1Api extends runtime.BaseAPI {

    /**
     * create a PodDisruptionBudget
     */
    async createPolicyV1beta1NamespacedPodDisruptionBudgetRaw(requestParameters: CreatePolicyV1beta1NamespacedPodDisruptionBudgetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiPolicyV1beta1PodDisruptionBudget>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createPolicyV1beta1NamespacedPodDisruptionBudget.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createPolicyV1beta1NamespacedPodDisruptionBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiPolicyV1beta1PodDisruptionBudgetToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiPolicyV1beta1PodDisruptionBudgetFromJSON(jsonValue));
    }

    /**
     * create a PodDisruptionBudget
     */
    async createPolicyV1beta1NamespacedPodDisruptionBudget(requestParameters: CreatePolicyV1beta1NamespacedPodDisruptionBudgetRequest, initOverrides?: RequestInit): Promise<IoK8sApiPolicyV1beta1PodDisruptionBudget> {
        const response = await this.createPolicyV1beta1NamespacedPodDisruptionBudgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a PodSecurityPolicy
     */
    async createPolicyV1beta1PodSecurityPolicyRaw(requestParameters: CreatePolicyV1beta1PodSecurityPolicyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiPolicyV1beta1PodSecurityPolicy>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createPolicyV1beta1PodSecurityPolicy.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/podsecuritypolicies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiPolicyV1beta1PodSecurityPolicyToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiPolicyV1beta1PodSecurityPolicyFromJSON(jsonValue));
    }

    /**
     * create a PodSecurityPolicy
     */
    async createPolicyV1beta1PodSecurityPolicy(requestParameters: CreatePolicyV1beta1PodSecurityPolicyRequest, initOverrides?: RequestInit): Promise<IoK8sApiPolicyV1beta1PodSecurityPolicy> {
        const response = await this.createPolicyV1beta1PodSecurityPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of PodDisruptionBudget
     */
    async deletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetRaw(requestParameters: DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deletePolicyV1beta1CollectionNamespacedPodDisruptionBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of PodDisruptionBudget
     */
    async deletePolicyV1beta1CollectionNamespacedPodDisruptionBudget(requestParameters: DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of PodSecurityPolicy
     */
    async deletePolicyV1beta1CollectionPodSecurityPolicyRaw(requestParameters: DeletePolicyV1beta1CollectionPodSecurityPolicyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/podsecuritypolicies`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of PodSecurityPolicy
     */
    async deletePolicyV1beta1CollectionPodSecurityPolicy(requestParameters: DeletePolicyV1beta1CollectionPodSecurityPolicyRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deletePolicyV1beta1CollectionPodSecurityPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a PodDisruptionBudget
     */
    async deletePolicyV1beta1NamespacedPodDisruptionBudgetRaw(requestParameters: DeletePolicyV1beta1NamespacedPodDisruptionBudgetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deletePolicyV1beta1NamespacedPodDisruptionBudget.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deletePolicyV1beta1NamespacedPodDisruptionBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a PodDisruptionBudget
     */
    async deletePolicyV1beta1NamespacedPodDisruptionBudget(requestParameters: DeletePolicyV1beta1NamespacedPodDisruptionBudgetRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deletePolicyV1beta1NamespacedPodDisruptionBudgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a PodSecurityPolicy
     */
    async deletePolicyV1beta1PodSecurityPolicyRaw(requestParameters: DeletePolicyV1beta1PodSecurityPolicyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiPolicyV1beta1PodSecurityPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deletePolicyV1beta1PodSecurityPolicy.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/podsecuritypolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiPolicyV1beta1PodSecurityPolicyFromJSON(jsonValue));
    }

    /**
     * delete a PodSecurityPolicy
     */
    async deletePolicyV1beta1PodSecurityPolicy(requestParameters: DeletePolicyV1beta1PodSecurityPolicyRequest, initOverrides?: RequestInit): Promise<IoK8sApiPolicyV1beta1PodSecurityPolicy> {
        const response = await this.deletePolicyV1beta1PodSecurityPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getPolicyV1beta1APIResourcesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getPolicyV1beta1APIResources(initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getPolicyV1beta1APIResourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind PodDisruptionBudget
     */
    async listPolicyV1beta1NamespacedPodDisruptionBudgetRaw(requestParameters: ListPolicyV1beta1NamespacedPodDisruptionBudgetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiPolicyV1beta1PodDisruptionBudgetList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listPolicyV1beta1NamespacedPodDisruptionBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiPolicyV1beta1PodDisruptionBudgetListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind PodDisruptionBudget
     */
    async listPolicyV1beta1NamespacedPodDisruptionBudget(requestParameters: ListPolicyV1beta1NamespacedPodDisruptionBudgetRequest, initOverrides?: RequestInit): Promise<IoK8sApiPolicyV1beta1PodDisruptionBudgetList> {
        const response = await this.listPolicyV1beta1NamespacedPodDisruptionBudgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind PodDisruptionBudget
     */
    async listPolicyV1beta1PodDisruptionBudgetForAllNamespacesRaw(requestParameters: ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiPolicyV1beta1PodDisruptionBudgetList>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/poddisruptionbudgets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiPolicyV1beta1PodDisruptionBudgetListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind PodDisruptionBudget
     */
    async listPolicyV1beta1PodDisruptionBudgetForAllNamespaces(requestParameters: ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesRequest, initOverrides?: RequestInit): Promise<IoK8sApiPolicyV1beta1PodDisruptionBudgetList> {
        const response = await this.listPolicyV1beta1PodDisruptionBudgetForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind PodSecurityPolicy
     */
    async listPolicyV1beta1PodSecurityPolicyRaw(requestParameters: ListPolicyV1beta1PodSecurityPolicyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiPolicyV1beta1PodSecurityPolicyList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/podsecuritypolicies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiPolicyV1beta1PodSecurityPolicyListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind PodSecurityPolicy
     */
    async listPolicyV1beta1PodSecurityPolicy(requestParameters: ListPolicyV1beta1PodSecurityPolicyRequest, initOverrides?: RequestInit): Promise<IoK8sApiPolicyV1beta1PodSecurityPolicyList> {
        const response = await this.listPolicyV1beta1PodSecurityPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified PodDisruptionBudget
     */
    async patchPolicyV1beta1NamespacedPodDisruptionBudgetRaw(requestParameters: PatchPolicyV1beta1NamespacedPodDisruptionBudgetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiPolicyV1beta1PodDisruptionBudget>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchPolicyV1beta1NamespacedPodDisruptionBudget.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchPolicyV1beta1NamespacedPodDisruptionBudget.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchPolicyV1beta1NamespacedPodDisruptionBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiPolicyV1beta1PodDisruptionBudgetFromJSON(jsonValue));
    }

    /**
     * partially update the specified PodDisruptionBudget
     */
    async patchPolicyV1beta1NamespacedPodDisruptionBudget(requestParameters: PatchPolicyV1beta1NamespacedPodDisruptionBudgetRequest, initOverrides?: RequestInit): Promise<IoK8sApiPolicyV1beta1PodDisruptionBudget> {
        const response = await this.patchPolicyV1beta1NamespacedPodDisruptionBudgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified PodDisruptionBudget
     */
    async patchPolicyV1beta1NamespacedPodDisruptionBudgetStatusRaw(requestParameters: PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiPolicyV1beta1PodDisruptionBudget>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchPolicyV1beta1NamespacedPodDisruptionBudgetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchPolicyV1beta1NamespacedPodDisruptionBudgetStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchPolicyV1beta1NamespacedPodDisruptionBudgetStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiPolicyV1beta1PodDisruptionBudgetFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified PodDisruptionBudget
     */
    async patchPolicyV1beta1NamespacedPodDisruptionBudgetStatus(requestParameters: PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiPolicyV1beta1PodDisruptionBudget> {
        const response = await this.patchPolicyV1beta1NamespacedPodDisruptionBudgetStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified PodSecurityPolicy
     */
    async patchPolicyV1beta1PodSecurityPolicyRaw(requestParameters: PatchPolicyV1beta1PodSecurityPolicyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiPolicyV1beta1PodSecurityPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchPolicyV1beta1PodSecurityPolicy.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchPolicyV1beta1PodSecurityPolicy.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/podsecuritypolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiPolicyV1beta1PodSecurityPolicyFromJSON(jsonValue));
    }

    /**
     * partially update the specified PodSecurityPolicy
     */
    async patchPolicyV1beta1PodSecurityPolicy(requestParameters: PatchPolicyV1beta1PodSecurityPolicyRequest, initOverrides?: RequestInit): Promise<IoK8sApiPolicyV1beta1PodSecurityPolicy> {
        const response = await this.patchPolicyV1beta1PodSecurityPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified PodDisruptionBudget
     */
    async readPolicyV1beta1NamespacedPodDisruptionBudgetRaw(requestParameters: ReadPolicyV1beta1NamespacedPodDisruptionBudgetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiPolicyV1beta1PodDisruptionBudget>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readPolicyV1beta1NamespacedPodDisruptionBudget.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readPolicyV1beta1NamespacedPodDisruptionBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiPolicyV1beta1PodDisruptionBudgetFromJSON(jsonValue));
    }

    /**
     * read the specified PodDisruptionBudget
     */
    async readPolicyV1beta1NamespacedPodDisruptionBudget(requestParameters: ReadPolicyV1beta1NamespacedPodDisruptionBudgetRequest, initOverrides?: RequestInit): Promise<IoK8sApiPolicyV1beta1PodDisruptionBudget> {
        const response = await this.readPolicyV1beta1NamespacedPodDisruptionBudgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified PodDisruptionBudget
     */
    async readPolicyV1beta1NamespacedPodDisruptionBudgetStatusRaw(requestParameters: ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiPolicyV1beta1PodDisruptionBudget>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readPolicyV1beta1NamespacedPodDisruptionBudgetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readPolicyV1beta1NamespacedPodDisruptionBudgetStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiPolicyV1beta1PodDisruptionBudgetFromJSON(jsonValue));
    }

    /**
     * read status of the specified PodDisruptionBudget
     */
    async readPolicyV1beta1NamespacedPodDisruptionBudgetStatus(requestParameters: ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiPolicyV1beta1PodDisruptionBudget> {
        const response = await this.readPolicyV1beta1NamespacedPodDisruptionBudgetStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified PodSecurityPolicy
     */
    async readPolicyV1beta1PodSecurityPolicyRaw(requestParameters: ReadPolicyV1beta1PodSecurityPolicyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiPolicyV1beta1PodSecurityPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readPolicyV1beta1PodSecurityPolicy.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/podsecuritypolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiPolicyV1beta1PodSecurityPolicyFromJSON(jsonValue));
    }

    /**
     * read the specified PodSecurityPolicy
     */
    async readPolicyV1beta1PodSecurityPolicy(requestParameters: ReadPolicyV1beta1PodSecurityPolicyRequest, initOverrides?: RequestInit): Promise<IoK8sApiPolicyV1beta1PodSecurityPolicy> {
        const response = await this.readPolicyV1beta1PodSecurityPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified PodDisruptionBudget
     */
    async replacePolicyV1beta1NamespacedPodDisruptionBudgetRaw(requestParameters: ReplacePolicyV1beta1NamespacedPodDisruptionBudgetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiPolicyV1beta1PodDisruptionBudget>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replacePolicyV1beta1NamespacedPodDisruptionBudget.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replacePolicyV1beta1NamespacedPodDisruptionBudget.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replacePolicyV1beta1NamespacedPodDisruptionBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiPolicyV1beta1PodDisruptionBudgetToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiPolicyV1beta1PodDisruptionBudgetFromJSON(jsonValue));
    }

    /**
     * replace the specified PodDisruptionBudget
     */
    async replacePolicyV1beta1NamespacedPodDisruptionBudget(requestParameters: ReplacePolicyV1beta1NamespacedPodDisruptionBudgetRequest, initOverrides?: RequestInit): Promise<IoK8sApiPolicyV1beta1PodDisruptionBudget> {
        const response = await this.replacePolicyV1beta1NamespacedPodDisruptionBudgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified PodDisruptionBudget
     */
    async replacePolicyV1beta1NamespacedPodDisruptionBudgetStatusRaw(requestParameters: ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiPolicyV1beta1PodDisruptionBudget>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replacePolicyV1beta1NamespacedPodDisruptionBudgetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replacePolicyV1beta1NamespacedPodDisruptionBudgetStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replacePolicyV1beta1NamespacedPodDisruptionBudgetStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiPolicyV1beta1PodDisruptionBudgetToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiPolicyV1beta1PodDisruptionBudgetFromJSON(jsonValue));
    }

    /**
     * replace status of the specified PodDisruptionBudget
     */
    async replacePolicyV1beta1NamespacedPodDisruptionBudgetStatus(requestParameters: ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiPolicyV1beta1PodDisruptionBudget> {
        const response = await this.replacePolicyV1beta1NamespacedPodDisruptionBudgetStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified PodSecurityPolicy
     */
    async replacePolicyV1beta1PodSecurityPolicyRaw(requestParameters: ReplacePolicyV1beta1PodSecurityPolicyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiPolicyV1beta1PodSecurityPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replacePolicyV1beta1PodSecurityPolicy.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replacePolicyV1beta1PodSecurityPolicy.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/podsecuritypolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiPolicyV1beta1PodSecurityPolicyToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiPolicyV1beta1PodSecurityPolicyFromJSON(jsonValue));
    }

    /**
     * replace the specified PodSecurityPolicy
     */
    async replacePolicyV1beta1PodSecurityPolicy(requestParameters: ReplacePolicyV1beta1PodSecurityPolicyRequest, initOverrides?: RequestInit): Promise<IoK8sApiPolicyV1beta1PodSecurityPolicy> {
        const response = await this.replacePolicyV1beta1PodSecurityPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind PodDisruptionBudget. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchPolicyV1beta1NamespacedPodDisruptionBudgetRaw(requestParameters: WatchPolicyV1beta1NamespacedPodDisruptionBudgetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchPolicyV1beta1NamespacedPodDisruptionBudget.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchPolicyV1beta1NamespacedPodDisruptionBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind PodDisruptionBudget. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchPolicyV1beta1NamespacedPodDisruptionBudget(requestParameters: WatchPolicyV1beta1NamespacedPodDisruptionBudgetRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchPolicyV1beta1NamespacedPodDisruptionBudgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of PodDisruptionBudget. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchPolicyV1beta1NamespacedPodDisruptionBudgetListRaw(requestParameters: WatchPolicyV1beta1NamespacedPodDisruptionBudgetListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchPolicyV1beta1NamespacedPodDisruptionBudgetList.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of PodDisruptionBudget. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchPolicyV1beta1NamespacedPodDisruptionBudgetList(requestParameters: WatchPolicyV1beta1NamespacedPodDisruptionBudgetListRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchPolicyV1beta1NamespacedPodDisruptionBudgetListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of PodDisruptionBudget. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRaw(requestParameters: WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/watch/poddisruptionbudgets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of PodDisruptionBudget. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces(requestParameters: WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind PodSecurityPolicy. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchPolicyV1beta1PodSecurityPolicyRaw(requestParameters: WatchPolicyV1beta1PodSecurityPolicyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchPolicyV1beta1PodSecurityPolicy.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/watch/podsecuritypolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind PodSecurityPolicy. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchPolicyV1beta1PodSecurityPolicy(requestParameters: WatchPolicyV1beta1PodSecurityPolicyRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchPolicyV1beta1PodSecurityPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of PodSecurityPolicy. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchPolicyV1beta1PodSecurityPolicyListRaw(requestParameters: WatchPolicyV1beta1PodSecurityPolicyListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1beta1/watch/podsecuritypolicies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of PodSecurityPolicy. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchPolicyV1beta1PodSecurityPolicyList(requestParameters: WatchPolicyV1beta1PodSecurityPolicyListRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchPolicyV1beta1PodSecurityPolicyListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
