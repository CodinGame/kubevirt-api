/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler,
  IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerFromJSON,
  IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerList,
  IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerListFromJSON,
  IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerToJSON,
  IoK8sApimachineryPkgApisMetaV1APIResourceList,
  IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
  IoK8sApimachineryPkgApisMetaV1DeleteOptions,
  IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
  IoK8sApimachineryPkgApisMetaV1Status,
  IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
  IoK8sApimachineryPkgApisMetaV1WatchEvent,
  IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
} from '../models';

export interface CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest {
  namespace: string;
  body: IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerRequest {
  namespace: string;
  pretty?: string;
  _continue?: string;
  dryRun?: string;
  fieldSelector?: string;
  gracePeriodSeconds?: number;
  labelSelector?: string;
  limit?: number;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  timeoutSeconds?: number;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest {
  name: string;
  namespace: string;
  pretty?: string;
  dryRun?: string;
  gracePeriodSeconds?: number;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesRequest {
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest {
  namespace: string;
  pretty?: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest {
  name: string;
  namespace: string;
  body: object;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
  force?: boolean;
}

export interface PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest {
  name: string;
  namespace: string;
  body: object;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
  force?: boolean;
}

export interface ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest {
  name: string;
  namespace: string;
  pretty?: string;
}

export interface ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest {
  name: string;
  namespace: string;
  pretty?: string;
}

export interface ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest {
  name: string;
  namespace: string;
  body: IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest {
  name: string;
  namespace: string;
  body: IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesRequest {
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest {
  name: string;
  namespace: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListRequest {
  namespace: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  timeoutSeconds?: number;
  watch?: boolean;
}

/**
 *
 */
export class AutoscalingV2beta1Api extends runtime.BaseAPI {
  /**
   * create a HorizontalPodAutoscaler
   */
  async createAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRaw(
    requestParameters: CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling createAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling createAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerFromJSON(jsonValue),
    );
  }

  /**
   * create a HorizontalPodAutoscaler
   */
  async createAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(
    requestParameters: CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler> {
    const response = await this.createAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * delete collection of HorizontalPodAutoscaler
   */
  async deleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerRaw(
    requestParameters: DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling deleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscaler.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue),
    );
  }

  /**
   * delete collection of HorizontalPodAutoscaler
   */
  async deleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscaler(
    requestParameters: DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
    const response =
      await this.deleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * delete a HorizontalPodAutoscaler
   */
  async deleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRaw(
    requestParameters: DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling deleteAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling deleteAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue),
    );
  }

  /**
   * delete a HorizontalPodAutoscaler
   */
  async deleteAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(
    requestParameters: DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
    const response = await this.deleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * get available resources
   */
  async getAutoscalingV2beta1APIResourcesRaw(
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/autoscaling/v2beta1/`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue),
    );
  }

  /**
   * get available resources
   */
  async getAutoscalingV2beta1APIResources(
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
    const response = await this.getAutoscalingV2beta1APIResourcesRaw(initOverrides);
    return await response.value();
  }

  /**
   * list or watch objects of kind HorizontalPodAutoscaler
   */
  async listAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesRaw(
    requestParameters: ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerList>> {
    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/autoscaling/v2beta1/horizontalpodautoscalers`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerListFromJSON(jsonValue),
    );
  }

  /**
   * list or watch objects of kind HorizontalPodAutoscaler
   */
  async listAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces(
    requestParameters: ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerList> {
    const response = await this.listAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * list or watch objects of kind HorizontalPodAutoscaler
   */
  async listAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRaw(
    requestParameters: ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerList>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling listAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerListFromJSON(jsonValue),
    );
  }

  /**
   * list or watch objects of kind HorizontalPodAutoscaler
   */
  async listAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(
    requestParameters: ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerList> {
    const response = await this.listAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * partially update the specified HorizontalPodAutoscaler
   */
  async patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRaw(
    requestParameters: PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling patchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling patchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling patchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.body as any,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerFromJSON(jsonValue),
    );
  }

  /**
   * partially update the specified HorizontalPodAutoscaler
   */
  async patchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(
    requestParameters: PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler> {
    const response = await this.patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * partially update status of the specified HorizontalPodAutoscaler
   */
  async patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRaw(
    requestParameters: PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.body as any,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerFromJSON(jsonValue),
    );
  }

  /**
   * partially update status of the specified HorizontalPodAutoscaler
   */
  async patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(
    requestParameters: PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler> {
    const response = await this.patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * read the specified HorizontalPodAutoscaler
   */
  async readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRaw(
    requestParameters: ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling readAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling readAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerFromJSON(jsonValue),
    );
  }

  /**
   * read the specified HorizontalPodAutoscaler
   */
  async readAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(
    requestParameters: ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler> {
    const response = await this.readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * read status of the specified HorizontalPodAutoscaler
   */
  async readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRaw(
    requestParameters: ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerFromJSON(jsonValue),
    );
  }

  /**
   * read status of the specified HorizontalPodAutoscaler
   */
  async readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(
    requestParameters: ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler> {
    const response = await this.readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * replace the specified HorizontalPodAutoscaler
   */
  async replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRaw(
    requestParameters: ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerFromJSON(jsonValue),
    );
  }

  /**
   * replace the specified HorizontalPodAutoscaler
   */
  async replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(
    requestParameters: ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler> {
    const response = await this.replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * replace status of the specified HorizontalPodAutoscaler
   */
  async replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRaw(
    requestParameters: ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerFromJSON(jsonValue),
    );
  }

  /**
   * replace status of the specified HorizontalPodAutoscaler
   */
  async replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(
    requestParameters: ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler> {
    const response = await this.replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesRaw(
    requestParameters: WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/autoscaling/v2beta1/watch/horizontalpodautoscalers`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces(
    requestParameters: WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response =
      await this.watchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * watch changes to an object of kind HorizontalPodAutoscaler. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRaw(
    requestParameters: WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling watchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling watchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/autoscaling/v2beta1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch changes to an object of kind HorizontalPodAutoscaler. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(
    requestParameters: WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListRaw(
    requestParameters: WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/autoscaling/v2beta1/watch/namespaces/{namespace}/horizontalpodautoscalers`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList(
    requestParameters: WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
