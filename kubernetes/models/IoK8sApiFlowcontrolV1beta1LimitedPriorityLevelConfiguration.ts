/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';
import {
  IoK8sApiFlowcontrolV1beta1LimitResponse,
  IoK8sApiFlowcontrolV1beta1LimitResponseFromJSON,
  IoK8sApiFlowcontrolV1beta1LimitResponseToJSON,
} from './';

/**
 * LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
 *  * How are requests for this priority level limited?
 *  * What should be done with requests that exceed the limit?
 * @export
 * @interface IoK8sApiFlowcontrolV1beta1LimitedPriorityLevelConfiguration
 */
export interface IoK8sApiFlowcontrolV1beta1LimitedPriorityLevelConfiguration {
  /**
   * `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:
   *
   *             ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
   *
   * bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
   * @type {number}
   * @memberof IoK8sApiFlowcontrolV1beta1LimitedPriorityLevelConfiguration
   */
  assuredConcurrencyShares?: number;
  /**
   *
   * @type {IoK8sApiFlowcontrolV1beta1LimitResponse}
   * @memberof IoK8sApiFlowcontrolV1beta1LimitedPriorityLevelConfiguration
   */
  limitResponse?: IoK8sApiFlowcontrolV1beta1LimitResponse;
}

export function IoK8sApiFlowcontrolV1beta1LimitedPriorityLevelConfigurationFromJSON(
  json: any,
): IoK8sApiFlowcontrolV1beta1LimitedPriorityLevelConfiguration {
  return IoK8sApiFlowcontrolV1beta1LimitedPriorityLevelConfigurationFromJSONTyped(json, false);
}

export function IoK8sApiFlowcontrolV1beta1LimitedPriorityLevelConfigurationFromJSONTyped(
  json: any,
  _ignoreDiscriminator: boolean,
): IoK8sApiFlowcontrolV1beta1LimitedPriorityLevelConfiguration {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    assuredConcurrencyShares: !exists(json, 'assuredConcurrencyShares')
      ? undefined
      : json['assuredConcurrencyShares'],
    limitResponse: !exists(json, 'limitResponse')
      ? undefined
      : IoK8sApiFlowcontrolV1beta1LimitResponseFromJSON(json['limitResponse']),
  };
}

export function IoK8sApiFlowcontrolV1beta1LimitedPriorityLevelConfigurationToJSON(
  value?: IoK8sApiFlowcontrolV1beta1LimitedPriorityLevelConfiguration | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    assuredConcurrencyShares: value.assuredConcurrencyShares,
    limitResponse: IoK8sApiFlowcontrolV1beta1LimitResponseToJSON(value.limitResponse),
  };
}
