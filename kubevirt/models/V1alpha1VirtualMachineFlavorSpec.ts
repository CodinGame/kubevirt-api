/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';
import {
  V1GPU,
  V1GPUFromJSON,
  V1GPUToJSON,
  V1HostDevice,
  V1HostDeviceFromJSON,
  V1HostDeviceToJSON,
  V1LaunchSecurity,
  V1LaunchSecurityFromJSON,
  V1LaunchSecurityToJSON,
  V1alpha1CPUFlavor,
  V1alpha1CPUFlavorFromJSON,
  V1alpha1CPUFlavorToJSON,
  V1alpha1MemoryFlavor,
  V1alpha1MemoryFlavorFromJSON,
  V1alpha1MemoryFlavorToJSON,
} from './';

/**
 * VirtualMachineFlavorSpec is a description of the VirtualMachineFlavor or VirtualMachineClusterFlavor.
 *
 * CPU and Memory are required attributes with both requiring that their Guest attribute is defined, ensuring a number of vCPUs and amount of RAM is always provided by each flavor.
 * @export
 * @interface V1alpha1VirtualMachineFlavorSpec
 */
export interface V1alpha1VirtualMachineFlavorSpec {
  /**
   *
   * @type {V1alpha1CPUFlavor}
   * @memberof V1alpha1VirtualMachineFlavorSpec
   */
  cpu: V1alpha1CPUFlavor;
  /**
   * Optionally defines any GPU devices associated with the flavor.
   * @type {Array<V1GPU>}
   * @memberof V1alpha1VirtualMachineFlavorSpec
   */
  gpus?: Array<V1GPU>;
  /**
   * Optionally defines any HostDevices associated with the flavor.
   * @type {Array<V1HostDevice>}
   * @memberof V1alpha1VirtualMachineFlavorSpec
   */
  hostDevices?: Array<V1HostDevice>;
  /**
   * Optionally defines the IOThreadsPolicy to be used by the flavor.
   * @type {string}
   * @memberof V1alpha1VirtualMachineFlavorSpec
   */
  ioThreadsPolicy?: string;
  /**
   *
   * @type {V1LaunchSecurity}
   * @memberof V1alpha1VirtualMachineFlavorSpec
   */
  launchSecurity?: V1LaunchSecurity;
  /**
   *
   * @type {V1alpha1MemoryFlavor}
   * @memberof V1alpha1VirtualMachineFlavorSpec
   */
  memory: V1alpha1MemoryFlavor;
}

export function V1alpha1VirtualMachineFlavorSpecFromJSON(
  json: any,
): V1alpha1VirtualMachineFlavorSpec {
  return V1alpha1VirtualMachineFlavorSpecFromJSONTyped(json, false);
}

export function V1alpha1VirtualMachineFlavorSpecFromJSONTyped(
  json: any,
  _ignoreDiscriminator: boolean,
): V1alpha1VirtualMachineFlavorSpec {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    cpu: V1alpha1CPUFlavorFromJSON(json['cpu']),
    gpus: !exists(json, 'gpus') ? undefined : (json['gpus'] as Array<any>).map(V1GPUFromJSON),
    hostDevices: !exists(json, 'hostDevices')
      ? undefined
      : (json['hostDevices'] as Array<any>).map(V1HostDeviceFromJSON),
    ioThreadsPolicy: !exists(json, 'ioThreadsPolicy') ? undefined : json['ioThreadsPolicy'],
    launchSecurity: !exists(json, 'launchSecurity')
      ? undefined
      : V1LaunchSecurityFromJSON(json['launchSecurity']),
    memory: V1alpha1MemoryFlavorFromJSON(json['memory']),
  };
}

export function V1alpha1VirtualMachineFlavorSpecToJSON(
  value?: V1alpha1VirtualMachineFlavorSpec | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    cpu: V1alpha1CPUFlavorToJSON(value.cpu),
    gpus: value.gpus === undefined ? undefined : (value.gpus as Array<any>).map(V1GPUToJSON),
    hostDevices:
      value.hostDevices === undefined
        ? undefined
        : (value.hostDevices as Array<any>).map(V1HostDeviceToJSON),
    ioThreadsPolicy: value.ioThreadsPolicy,
    launchSecurity: V1LaunchSecurityToJSON(value.launchSecurity),
    memory: V1alpha1MemoryFlavorToJSON(value.memory),
  };
}
